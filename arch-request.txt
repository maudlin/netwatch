here’s a concrete build plan your engineer can run with. it’s optimized for ultra-light CPU/RAM, steady low network use, and a calm, fluent-ish UI that matches your mockup.

architecture (process + threads)
single process, STA WPF app (.NET 8), one background probe loop + UI thread.

no polling storm: a single PeriodicTimer (1s) orchestrates sub-tasks; stagger actual operations within each tick (e.g., 0ms gateway ping, +333ms resolver ping, +666ms public ping).

async I/O everywhere (no blocking waits). use async/await, not Task.Run hot loops.

below-normal thread priority for the probe loop.

metrics to collect (and cadence)
ICMP ping to:

default gateway (L2/nearest hop)

active DNS resolver

stable public host (e.g., 1.1.1.1 configurable)

cadence: 1 Hz per target (total 3 pings/second), staggered within the second.

timeout: 900 ms; on timeout, record as loss (don’t retry).

DNS timing:

every 12 s, Dns.GetHostAddressesAsync with randomized prefix (cache-bust).

timeout cap: 1500 ms; a timeout counts as a slow sample.

link info:

every 5 s, refresh interface name, type, speed (and if Wi-Fi, SSID, signal, band/channel via netsh wlan show interfaces or Native Wifi API). Don’t query every second.

bufferbloat test:

manual (button) or Call Guard (auto, only when known comms app is active; min interval 10 min).

during test (5–10 s), keep pings at 2 Hz; run capped upload with 2–4 parallel HTTP streams.

data structures (GC-friendly)
fixed circular buffers (lock-free/low-lock):

last 120 ping samples per target (int RTT ms, bool success).

last 60 DNS timings (int ms).

design: arrays + head index; overwrite oldest; no List<T> growth/shrink.

streaming statistics (no sorting per tick):

p50/p95 → P² quantile estimator per stream (constant memory).

jitter → Welford online variance/stddev on RTT of successful pings.

loss% → counters over the last N samples (e.g., windowed counters aligned to buffer size).

UI model exposes preformatted strings (e.g., “14 ms”, “p95 23 ms”, “loss 0.3%”) to avoid per-frame string churn in XAML converters.

probe loop (1s cadence)
T=0 ms: schedule gateway ping (await).

T=333 ms: schedule resolver ping (await).

T=666 ms: schedule public ping (await).

if (tick % 12)==0: schedule DNS timing (await with 1.5 s CTS).

if (tick % 5)==0: refresh link badge (NIC type + Mbps or Wi-Fi details).

after updating buffers, recompute derived stats with streaming estimators, update a small DTO for UI, and raise property changes at most 1–2 Hz (coalesce if multiple props changed).

status heuristic (calm, deterministic)
evaluate against public ping stats primarily; add DNS as a tiebreaker:

GREEN when:

loss < 0.5%, jitter < 20 ms, p50 < 60 ms, DNS median < 50 ms

AMBER when any:

loss 0.5–2%, jitter 20–50 ms, p50 60–120 ms, DNS 50–150 ms

RED when any:

loss > 2%, jitter > 50 ms, p50 > 120 ms, DNS > 150 ms

bufferbloat delta classed by added median RTT during upload:

+≤40 ms GREEN, 40–120 ms AMBER, >120 ms RED

status reason: build a concise string from triggered rules (first 2–3 only).

bufferbloat (uplink under load)
baseline: rolling median RTT (P² p50) from last 30–60 s idle.

load: start 2–4 HTTP/2 uploads of a generated byte stream (e.g., PushStreamContent / in-memory pipe) to a discard endpoint you control (or iperf3 server). Cap per-stream bandwidth to ~60–70% of provisioned uplink if known; otherwise let TCP self-throttle—short duration keeps it polite.

during load: keep pings at 2 Hz, compute median under load; delta = load_median − baseline_median.

stop immediately on cancel/close; don’t leave sockets half-open.

never auto-run on metered/battery unless user opted in.

ui implementation to match mockup
Mini HUD (frameless 280×180):

window: transparent, root Border (radius 14) with dark card bg, 1px subtle border, soft drop shadow.

header (row=0): “Network Health” (muted), status pill (filled with status brush), right-aligned “↻ HH:MM:SS”.

body (row=1): UniformGrid 2×2 tiles. each tile: label (muted), big number, subtext (subtle). bufferbloat tile includes a compact button.

footer (row=2): link badge left; buttons right (Details, ✕).

updates: UI props refreshed 1 Hz; animate status pill color cross-fade 150 ms.

Expanded Panel (420×560):

single column stack of cards with 14 px gaps.

sections: connection summary; readiness mini-tiles (with thin colored left accent strips); sparklines (latency & jitter); packet-loss lollipops; bufferbloat (idle vs load bars + big delta); DNS & targets; footer with status reason + Call Guard toggle.

sparklines: lightweight custom DrawingVisual control (1px polyline, no grid). Accept a double[] of last N points (normalized 0–1 in VM to avoid control recomputing min/max). Freeze pens/brushes.

no chart library; keep render <0.1 ms/frame.

performance budgets & switches
steady CPU: < 0.5% on a modern laptop; RAM: 15–30 MB WS.

idle network: ~ 0.3–1.0 kbps (pings + infrequent DNS).

light mode (when window hidden or on battery): halve ping cadence (0.5 Hz), DNS every 30 s, link info every 10 s; UI updates paused.

backoff: if consecutive ping timeouts to all targets > 10 s, reduce cadence temporarily and surface “offline”.

discovery (gateway/dns) & targets
gateway: from NetworkInterface.GetAllNetworkInterfaces() → IPInterfaceProperties.GatewayAddresses (IPv4 first up NIC).

resolver: IPInterfaceProperties.DnsAddresses (IPv4 preferred).

public: default 1.1.1.1, editable.

watch for NIC change events (NetworkChange.NetworkAddressChanged); on change, re-discover targets and clear old stats.

resilience & safety
timeouts on every external op; no nested retries.

cts wiring: one master CTS propagated; on exit, cancel, wait for in-flight ops with short grace (≤ 250 ms), then shut down.

exception policy: catch & record once per category (ping, dns, http), avoid log spam; continue loop.

accessibility & polish
text contrast ≥ 4.5:1; focus visuals for all buttons.

consistent units everywhere (ms, %, +ms).

Copy Snapshot outputs a compact, support-friendly block (current link, p50/jitter/loss for each target, DNS median/p90, last bloat delta, status + reason).

test plan (manual + perf)
functionality:

unplug/replug NIC → targets rediscovered, app doesn’t crash.

switch Wi-Fi bands/APs → link badge updates.

run a large upload (OneDrive/Drive) → bloat delta rises; status flips AMBER/RED.

perf:

Task Manager: CPU <1%, RAM steady; network a few hundred bytes/sec idle.

PerfView: confirm no per-tick allocations (watch boxing/LINQ).

edge cases:

captive portal / no DNS → DNS timing logs as slow, status reason includes DNS.

ICMP blocked but TCP ok → Public ping shows loss; include resolver/gateway to avoid all-red false alarm.

configuration defaults (user-tunable)
ping cadence: 1 Hz

dns cadence: 12 s

link refresh: 5 s

bufferbloat duration: 10 s

parallel upload streams: 3

thresholds: as above; expose in settings file.